;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name om.util, :imports nil, :requires nil, :uses nil, :defs {join-value {:protocol-inline nil, :meta {:file "/home/fede/smallProjects/om-tutorial/resources/public/js/om/util.cljc", :line 38, :column 7, :end-line 38, :end-column 17, :arglists (quote ([join]))}, :name om.util/join-value, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 17, :method-params ([join]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([join]))}, join-entry {:protocol-inline nil, :meta {:file "/home/fede/smallProjects/om-tutorial/resources/public/js/om/util.cljc", :line 27, :column 7, :end-line 27, :end-column 17, :arglists (quote ([expr]))}, :name om.util/join-entry, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 17, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([expr]))}, recursion? {:protocol-inline nil, :meta {:file "/home/fede/smallProjects/om-tutorial/resources/public/js/om/util.cljc", :line 46, :column 7, :end-line 46, :end-column 17, :arglists (quote ([x])), :tag boolean}, :name om.util/recursion?, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :ret-tag boolean, :end-line 46, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, union? {:protocol-inline nil, :meta {:file "/home/fede/smallProjects/om-tutorial/resources/public/js/om/util.cljc", :line 7, :column 7, :end-line 7, :end-column 13, :arglists (quote ([expr])), :tag boolean}, :name om.util/union?, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 13, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :ret-tag boolean, :end-line 7, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([expr]))}, mutation-key {:protocol-inline nil, :meta {:file "/home/fede/smallProjects/om-tutorial/resources/public/js/om/util.cljc", :line 59, :column 7, :end-line 59, :end-column 19, :arglists (quote ([expr]))}, :name om.util/mutation-key, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 19, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([expr]))}, unique-ident? {:protocol-inline nil, :meta {:file "/home/fede/smallProjects/om-tutorial/resources/public/js/om/util.cljc", :line 41, :column 7, :end-line 41, :end-column 20, :arglists (quote ([x])), :tag boolean}, :name om.util/unique-ident?, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :ret-tag boolean, :end-line 41, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, mutation? {:protocol-inline nil, :meta {:file "/home/fede/smallProjects/om-tutorial/resources/public/js/om/util.cljc", :line 53, :column 7, :end-line 53, :end-column 16, :arglists (quote ([expr])), :tag boolean}, :name om.util/mutation?, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 16, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :ret-tag boolean, :end-line 53, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([expr]))}, join-key {:protocol-inline nil, :meta {:file "/home/fede/smallProjects/om-tutorial/resources/public/js/om/util.cljc", :line 32, :column 7, :end-line 32, :end-column 15, :arglists (quote ([expr]))}, :name om.util/join-key, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 15, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([expr]))}, ident? {:protocol-inline nil, :meta {:file "/home/fede/smallProjects/om-tutorial/resources/public/js/om/util.cljc", :line 19, :column 7, :end-line 19, :end-column 13, :arglists (quote ([x])), :doc "Returns true if x is an ident.", :tag boolean}, :name om.util/ident?, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :ret-tag boolean, :end-line 19, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x])), :doc "Returns true if x is an ident."}, force-children {:protocol-inline nil, :meta {:file "/home/fede/smallProjects/om-tutorial/resources/public/js/om/util.cljc", :line 3, :column 7, :end-line 3, :end-column 21, :arglists (quote ([x]))}, :name om.util/force-children, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, join? {:protocol-inline nil, :meta {:file "/home/fede/smallProjects/om-tutorial/resources/public/js/om/util.cljc", :line 14, :column 7, :end-line 14, :end-column 12, :arglists (quote ([x]))}, :name om.util/join?, :variadic false, :file "resources/public/js/om/util.cljc", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{first :else _ expr ... symbol?}, :order [:else _ ... symbol? first expr]}, :doc nil}